---
description: 
globs: *.ts,*.html
alwaysApply: false
---
## FRONTEND

### Guidelines for ANGULAR

#### ANGULAR_CODING_STANDARDS

- Use standalone components, directives, and pipes instead of NgModules
- Implement signals for state management instead of traditional RxJS-based approaches
- Use the new inject function instead of constructor injection
- Implement control flow with @if, @for, and @switch instead of *ngIf, *ngFor, etc.
- Leverage functional guards and resolvers instead of class-based ones
- Use the new deferrable views for improved loading states
- Implement OnPush change detection strategy for improved performance
- Use TypeScript decorators with explicit visibility modifiers (public, private)
- Leverage Angular CLI for schematics and code generation
- Implement proper lazy loading with loadComponent and loadChildren
- New componenents always create in seperate folder with seperate html file fo template and scss file fo styling

### Guidelines for Accessibility

#### ARIA Best Practices

- Use ARIA landmarks to identify regions of the page (main, navigation, search, etc.)
- Apply appropriate ARIA roles to custom interface elements that lack semantic HTML equivalents
- Set aria-expanded and aria-controls for expandable content like accordions and dropdowns
- Use aria-live regions with appropriate politeness settings for dynamic content updates
- Implement aria-hidden to hide decorative or duplicative content from screen readers
- Apply aria-label or aria-labelledby for elements without visible text labels
- Use aria-describedby to associate descriptive text with form inputs or complex elements
- Implement aria-current for indicating the current item in a set, navigation, or process
- Avoid redundant ARIA that duplicates the semantics of native HTML elements

TITLE: Creating Injectable Service in Angular
DESCRIPTION: This TypeScript code demonstrates how to create a service in Angular that can be injected using dependency injection. The @Injectable decorator is applied to a class to make it available for injection throughout the application. The providedIn property is set to 'root', making the service available at the application level. This pattern is essential for managing data and interactions with APIs in a reusable manner across the Angular application.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/19-creating-an-injectable-service/README.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
@Injectable({
    providedIn: 'root'
})
class UserService {
    // methods to retrieve and return data
}
```

----------------------------------------

TITLE: Using Setters and Getters in Angular
DESCRIPTION: Demonstrates Angular component inputs with setters and getters, showcasing input accessor complexity. It highlights migration issues for accessor inputs not being migrated due to their complexity.
SOURCE: https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden_best_effort.txt#2025-04-22_snippet_25

LANGUAGE: typescript
CODE:
```
// tslint:disable

import {Input, input} from '@angular/core';

export class WithSettersAndGetters {
  // TODO: Skipped for migration because:
  //  Accessor inputs cannot be migrated as they are too complex.
  @Input()
  set onlySetter(newValue: any) {
    this._bla = newValue;
    if (newValue === 0) {
      console.log('test');
    }
  }
  private _bla: any;

  // TODO: Skipped for migration because:
  //  Accessor inputs cannot be migrated as they are too complex.
  @Input()
  get accessor(): string {
    return '';
  }
  set accessor(newValue: string) {
    this._accessor = newValue;
  }
  private _accessor: string = '';

  readonly simpleInput = input.required<string>();
}
```

----------------------------------------

TITLE: Transforming Input Values in Angular
DESCRIPTION: Demonstrates using a `transform` function with the `@Input` decorator to modify an input's value. The `trimString` function trims a string input before setting its value.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-22_snippet_11

LANGUAGE: ts
CODE:
```
@Component({
  selector: 'custom-slider',
  ...
})
export class CustomSlider {
  @Input({transform: trimString}) label = '';
}

function trimString(value: string | undefined) { return value?.trim() ?? ''; }
```

----------------------------------------

TITLE: Displaying Validation Errors in Angular Template-Driven Forms (HTML)
DESCRIPTION: Shows how to display validation error messages in an Angular template-driven form. It uses the `ngModel` export (`#name="ngModel"`) to check the control's `valid`, `dirty`, and `touched` states. Standard HTML attributes (`required`, `minlength`) and a custom validator directive (`forbiddenName`) are applied. Error messages for `required`, `minlength`, and `forbiddenName` are conditionally displayed using `*ngIf` based on the control's validity and interaction state (dirty or touched).
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-22_snippet_0

LANGUAGE: html
CODE:
```
<label for="name">Name</label>
<input type="text" id="name" class="form-control" required minlength="4" appForbiddenName="bob"
      name="name" [(ngModel)]="model.name" #name="ngModel" >

<div *ngIf="name.invalid && (name.dirty || name.touched)"
    class="alert alert-danger">

  <div *ngIf="name.errors?.['required']">
    Name is required.
  </div>
  <div *ngIf="name.errors?.['minlength']">
    Name must be at least 4 characters long.
  </div>
  <div *ngIf="name.errors?.['forbiddenName']">
    Name cannot be Bob.
  </div>

</div>
```

----------------------------------------

TITLE: Overriding Component Providers in TestBed with overrideComponent - Angular - TypeScript
DESCRIPTION: This snippet demonstrates how to override the providers of a specific component (HeroDetailComponent) during testing using TestBed.overrideComponent. Instead of configuring providers at the module level, this method targets the component's own injector by resetting its providers array, often with a spy version like HeroDetailServiceSpy. This technique enables tight control over component dependencies in tests where standard injection is insufficient. Requires: Angular TestBed, HeroDetailServiceSpy implementation.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-22_snippet_25

LANGUAGE: typescript
CODE:
```
beforeEach(async(() => {\n  TestBed.configureTestingModule({\n    imports: [HeroModule],\n    // Note: No provider for HeroService necessary\n  })\n  .overrideComponent(HeroDetailComponent, {\n    set: { providers: [ { provide: HeroDetailService, useClass: HeroDetailServiceSpy } ] }\n  })\n  .compileComponents();\n}));
```

----------------------------------------

TITLE: Invalid Injection Attempt Using TypeScript Interface Token (TypeScript)
DESCRIPTION: Demonstrates the incorrect usage of a TypeScript interface ('AppConfig') as a DI token when calling 'inject', which is invalid because interfaces have no runtime representation. This serves as a cautionary example, underscoring the need for class or InjectionToken objects as DI tokens.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-22_snippet_13

LANGUAGE: typescript
CODE:
```
export class AppComponent {
  // Can't inject using the interface as the parameter type
  private config = inject(AppConfig);
}
```

----------------------------------------

TITLE: Using Signals in Angular Components
DESCRIPTION: This snippet demonstrates how to use signals and computed signals within an Angular component. It shows the creation of multiple signals and a computed signal that depends on them, as well as a method to update a signal's value.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/introduction/essentials/signals.md#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
@Component({/* ... */})
export class UserProfile {
  isTrial = signal(false);
  isTrialExpired = signal(false);
  showTrialDuration = computed(() => this.isTrial() && !this.isTrialExpired());

  activateTrial() {
    this.isTrial.set(true);
  }
}
```

----------------------------------------

TITLE: Defining FormGroup Class in TypeScript for Angular
DESCRIPTION: This snippet defines the FormGroup class, which represents a group of form controls. It includes methods for adding, removing, and manipulating controls within the group, as well as handling form submission and reset.
SOURCE: https://github.com/angular/angular/blob/main/goldens/public-api/forms/index.api.md#2025-04-22_snippet_10

LANGUAGE: TypeScript
CODE:
```
export class FormGroup<TControl extends {
    [K in keyof TControl]: AbstractControl<any>;
} = any> extends AbstractControl<ɵTypedOrUntyped<TControl, ɵFormGroupValue<TControl>, any>, ɵTypedOrUntyped<TControl, ɵFormGroupRawValue<TControl>, any>> {
    constructor(controls: TControl, validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null);
    addControl(this: FormGroup<{
        [key: string]: AbstractControl<any>;
    }>, name: string, control: AbstractControl, options?: {
        emitEvent?: boolean;
    }): void;
    // (undocumented)
    addControl<K extends string & keyof TControl>(name: K, control: Required<TControl>[K], options?: {
        emitEvent?: boolean;
    }): void;
    contains<K extends string>(controlName: K): boolean;
    // (undocumented)
    contains(this: FormGroup<{
        [key: string]: AbstractControl<any>;
    }>, controlName: string): boolean;
    // (undocumented)
    controls: ɵTypedOrUntyped<TControl, TControl, {
        [key: string]: AbstractControl<any>;
    }>;
    getRawValue(): ɵTypedOrUntyped<TControl, ɵFormGroupRawValue<TControl>, any>;
    patchValue(value: ɵFormGroupValue<TControl>, options?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    registerControl<K extends string & keyof TControl>(name: K, control: TControl[K]): TControl[K];
    // (undocumented)
    registerControl(this: FormGroup<{
        [key: string]: AbstractControl<any>;
    }>, name: string, control: AbstractControl<any>): AbstractControl<any>;
    // (undocumented)
    removeControl(this: FormGroup<{
        [key: string]: AbstractControl<any>;
    }>, name: string, options?: {
        emitEvent?: boolean;
    }): void;
    // (undocumented)
    removeControl<S extends string>(name: ɵOptionalKeys<TControl> & S, options?: {
        emitEvent?: boolean;
    }): void;
    reset(value?: ɵTypedOrUntyped<TControl, ɵFormGroupValue<TControl>, any>, options?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    setControl<K extends string & keyof TControl>(name: K, control: TControl[K], options?: {
        emitEvent?: boolean;
    }): void;
    // (undocumented)
    setControl(this: FormGroup<{
        [key: string]: AbstractControl<any>;
    }>, name: string, control: AbstractControl, options?: {
        emitEvent?: boolean;
    }): void;
}
```

----------------------------------------

TITLE: Defining NgModel Class for Template Forms
DESCRIPTION: TypeScript class declaration for NgModel directive used in template-driven forms. Includes properties for form control binding, validation states, and model updates.
SOURCE: https://github.com/angular/angular/blob/main/goldens/public-api/forms/index.api.md#2025-04-22_snippet_22

LANGUAGE: typescript
CODE:
```
export class NgModel {
    readonly control: FormControl;
    get formDirective(): any;
    isDisabled: boolean;
    model: any;
    name: string;
    static ngAcceptInputType_isDisabled: boolean | string;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    options: {
        name?: string;
        standalone?: boolean;
        updateOn?: FormHooks;
    };
    get path(): string[];
    update: EventEmitter<any>;
    viewModel: any;
    viewToModelUpdate(newValue: any): void;
}
```

----------------------------------------

TITLE: Using Reference Variables with Interaction Trigger in Angular @defer
DESCRIPTION: Example showing how to use a template reference variable with the interaction trigger to watch for interactions with a specific element.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-22_snippet_10

LANGUAGE: angular-html
CODE:
```
<div #greeting>Hello!</div>
@defer (on interaction(greeting)) {
  <greetings-cmp />
}
```

----------------------------------------

TITLE: Providing Application-level Singleton Service with @Injectable (Angular, TypeScript)
DESCRIPTION: This snippet demonstrates how to declare a singleton Angular service using the @Injectable decorator and the providedIn: 'root' property. This registers the service instance with the root EnvironmentInjector, making it globally available throughout the application. Requires the '@angular/core' package; the service has a public property 'name' and is tree-shakable by optimization tools, minimizing bundle size if unused.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/di/hierarchical-dependency-injection.md#2025-04-22_snippet_0

LANGUAGE: typescript
CODE:
```
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'  // <--provides this service in the root EnvironmentInjector
})
export class ItemService {
  name = 'telephone';
}

```

----------------------------------------

TITLE: Querying with @ContentChildren in Angular Typescript
DESCRIPTION: This snippet shows how to leverage @ContentChildren to retrieve multiple instances of a component projected within another component in Angular. It retrieves multiple CustomMenuItem components in a CustomMenu component and processes their data in ngAfterContentInit using the provided QueryList.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/components/queries.md#2025-04-22_snippet_11

LANGUAGE: typescript
CODE:
```
@Component({
  selector: 'custom-menu-item',
  /*...*/
})
export class CustomMenuItem {
  text: string;
}

@Component({
  selector: 'custom-menu',
  /*...*/
})
export class CustomMenu {
  @ContentChildren(CustomMenuItem) items: QueryList<CustomMenuItem>;

  ngAfterContentInit() {
    this.items.forEach(item => {
      console.log(item.text);
    });
  }
}

@Component({
  selector: 'user-profile',
  template: `
    <custom-menu>
      <custom-menu-item>Cheese</custom-menu-item>
      <custom-menu-item>Tomato</custom-menu-item>
    </custom-menu>
  `
})
export class UserProfile { }
```

----------------------------------------

TITLE: Displaying Validation Errors in Angular Reactive Forms (HTML)
DESCRIPTION: Illustrates how to display validation error messages in the template for an Angular reactive form. It binds the input element to the corresponding `FormControl` using the `formControlName` directive. Error messages are conditionally displayed using `*ngIf`, checking the control's state (e.g., `name.invalid`, `name.touched`, `name.dirty`) and specific errors (`name.errors?.required`, `name.errors?.minlength`, `name.errors?.forbiddenName`) accessed via a getter method (`name`) defined in the component class. The native HTML `required` attribute is kept for accessibility.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-22_snippet_2

LANGUAGE: html
CODE:
```
<label for="name">Name</label>
<input id="name" class="form-control" formControlName="name" required >

<div *ngIf="name.invalid && (name.dirty || name.touched)" class="alert alert-danger">

  <div *ngIf="name.errors?.['required']">
    Name is required.
  </div>
  <div *ngIf="name.errors?.['minlength']">
    Name must be at least 4 characters long.
  </div>
  <div *ngIf="name.errors?.['forbiddenName']">
    Name cannot be Bob.
  </div>

</div>
```

----------------------------------------

TITLE: Corrected Angular @for Loop with Unique Keys
DESCRIPTION: Fixed version of the Angular component using a proper tracking expression with unique keys. The track expression uses item.key which ensures each item has a unique identifier.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/reference/errors/NG0955.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
@Component({
    template: `@for (item of items; track item.key) {{{item.value}}}`,
})
class TestComponent {
    items = [{key: 1, value: 'a'}, {key: 2, value: 'b'}, {key: 3, value: 'a'}];
}
```

----------------------------------------

TITLE: Linking FormGroup and FormControls to Form in Angular
DESCRIPTION: Links FormGroup to a form using [formGroup] directive and FormControls to inputs using formControlName directive, ensuring data binding between the form's structure and form data.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/17-reactive-forms/README.md#2025-04-22_snippet_2

LANGUAGE: angular-html
CODE:
```
<form [formGroup]="profileForm">
  <label>
    Name
    <input type="text" formControlName="name" />
  </label>
  <label>
    Email
    <input type="email" formControlName="email" />
  </label>
  <button type="submit">Submit</button>
</form>
```

----------------------------------------

TITLE: Using Contextual Variables with let Aliases in Angular @for Blocks
DESCRIPTION: Demonstrates how to alias the implicit contextual variables ($index, $even, etc.) that are available in @for blocks. Aliases are useful particularly when nesting @for blocks.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/control-flow.md#2025-04-22_snippet_4

LANGUAGE: angular-html
CODE:
```
@for (item of items; track item.id; let idx = $index, e = $even) {
  <p>Item #{{ idx }}: {{ item.name }}</p>
}
```

----------------------------------------

TITLE: Rendered DOM from Class Bindings
DESCRIPTION: This HTML shows how Angular renders the three different class binding approaches from the previous component example.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/binding.md#2025-04-22_snippet_11

LANGUAGE: angular-html
CODE:
```
<ul class="full-width outlined"> ... </ul>
<section class="expandable elevated"> ... </section>
<button class="highlighted"> ... </button>
```

----------------------------------------

TITLE: Implementing Search Filter Logic in HomeComponent (TypeScript)
DESCRIPTION: Adds the `filterResults(text: string)` method to the `HomeComponent` class. This method filters the main `housingLocationList` based on a case-insensitive match between the provided `text` and the `city` property of each location. The resulting filtered array is assigned to `filteredLocationList`. If the search text is empty, it resets `filteredLocationList` to show all locations.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/13-search/README.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
export class HomeComponent {
  // ...
  filterResults(text: string) {
    if (!text) {
      this.filteredLocationList = this.housingLocationList;
      return;
    }

    this.filteredLocationList = this.housingLocationList.filter(
      housingLocation => housingLocation?.city.toLowerCase().includes(text.toLowerCase())
    );
  }
}
```

----------------------------------------

TITLE: Creating a New Angular Project
DESCRIPTION: Command to create a new Angular project using the Angular CLI. Replace <project-name> with your desired project name.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/introduction/installation.md#2025-04-22_snippet_1

LANGUAGE: shell
CODE:
```
ng new <project-name>
```

----------------------------------------

TITLE: Declaring a FormControl Instance in Angular
DESCRIPTION: This snippet demonstrates how to declare a FormControl instance with an initial empty string value, allowing immediate access to update and validate the state of the form input within the Angular component class.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-22_snippet_1

LANGUAGE: typescript
CODE:
```
<docs-code header=\"src/app/name-editor/name-editor.component.ts\" path=\"adev/src/content/examples/reactive-forms/src/app/name-editor/name-editor.component.ts\" visibleRegion=\"create-control\"/>
```

----------------------------------------

TITLE: Displaying the Angular Component
DESCRIPTION: This snippet details how the FormControl in the Angular component is displayed when the component is added to a template, showcasing a practical implementation of reactive forms.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-22_snippet_3

LANGUAGE: html
CODE:
```
<docs-code header=\"src/app/app.component.html (name editor)\" path=\"adev/src/content/examples/reactive-forms/src/app/app.component.1.html\" visibleRegion=\"app-name-editor\"/>
```

----------------------------------------

TITLE: Aliasing Services with useExisting in Angular (TypeScript)
DESCRIPTION: Demonstrates how to make one DI token ('OldLogger') serve as an alias for another ('NewLogger') using 'useExisting', ensuring both tokens resolve to the same instance. It's crucial for singleton services and provides consistency across a codebase when refactoring or maintaining backward compatibility. Both 'NewLogger' and 'OldLogger' should be injectable.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-22_snippet_5

LANGUAGE: typescript
CODE:
```
[
  NewLogger,
  // Alias OldLogger w/ reference to NewLogger
  { provide: OldLogger, useExisting: NewLogger},
]
```

----------------------------------------

TITLE: Using Components in Templates
DESCRIPTION: Demonstrates how to use one component inside another by including its selector as an HTML element. This example shows ProfilePhoto being used within the UserProfile component.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/guide/components/anatomy-of-components.md#2025-04-22_snippet_5

LANGUAGE: angular-ts
CODE:
```
@Component({
  selector: 'profile-photo',
})
export class ProfilePhoto { }

@Component({
  imports: [ProfilePhoto],
  template: `<profile-photo />`
})
export class UserProfile { }
```

----------------------------------------

TITLE: Injecting Services into Angular Components - TypeScript
DESCRIPTION: This snippet demonstrates how to inject a service into an Angular component using constructor-based dependency injection. The `PetCareService` is injected into the `PetCarDashboardComponent` by specifying it as a private parameter in the constructor. This makes `petCareService` readily accessible within the component. Understanding this approach facilitates better management of resources in Angular applications.
SOURCE: https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/21-constructor-based-di/README.md#2025-04-22_snippet_0

LANGUAGE: TypeScript
CODE:
```
@Component({...})
class PetCarDashboardComponent {
    constructor(private petCareService: PetCareService) {
        ...
    }
}
```

