---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: src/db/*.ts,src/middleware/*.ts,src/lib/*.ts
alwaysApply: false
---
### Backend and Database

- Use Supabase for backend services, including authentication and database interactions.
- Follow Supabase guidelines for security and performance.
- Use Zod schemas to validate data exchanged with the backend.
- Use SupabaseClient type from `src/app/core/supabase/supabase.service.ts`, not from `@supabase/supabase-js`
- always use RXJx Never use a promises
- never use controller for supabase methods
- Always use services instead of creating supabase database methods. The method should use rxjs and  Supabase Client SDK like this:
 CODE:
 ```

constructor(private supabase: SupabaseService) {}

 getMeals(): Observable<any[]> {
    return from(
      this.supabase.from('meals').select('*')
    ).pipe(
      map(result => {
        if (result.error) throw result.error;
        return result.data;
      })
    );
  } 
  ```
